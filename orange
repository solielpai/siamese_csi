import pandas as pd
import numpy as np
import lightgbm as lgb
from sklearn.model_selection import StratifiedKFold

from sklearn.preprocessing import LabelEncoder

from keras.utils import np_utils
import re




def tpr_weight_funtion(y_true,y_predict):
    d = pd.DataFrame()
    d['prob'] = list(y_predict)
    d['y'] = list(y_true)
    d = d.sort_values(['prob'], ascending=[0])
    y = d.y
    PosAll = pd.Series(y).value_counts()[1]
    NegAll = pd.Series(y).value_counts()[0]
    pCumsum = d['y'].cumsum()
    nCumsum = np.arange(len(y)) - pCumsum + 1
    pCumsumPer = pCumsum / PosAll
    nCumsumPer = nCumsum / NegAll
    TR1 = pCumsumPer[abs(nCumsumPer-0.001).idxmin()]
    TR2 = pCumsumPer[abs(nCumsumPer-0.005).idxmin()]
    TR3 = pCumsumPer[abs(nCumsumPer-0.01).idxmin()]
    return 'TC_AUC',0.4 * TR1 + 0.3 * TR2 + 0.3 * TR3,True
path=r'C:\Users\Administrator\Desktop\sweet\da'
op_train = pd.read_csv(path+r'/operation_train_new.csv')
def tim(da) :
#    
    t=[]
    m=[]
    s=[]
    for x in da['time']:
        t.append(int(str(x).split(':')[0]))
        m.append(int(str(x).split(':')[1]))
        s.append(int(str(x).split(':')[2]))
    da['t']=t
    da['m']=m
    da['s']=s   
    da.drop('time',axis=1,inplace=True)
    return da
trans_train = pd.read_csv(path+r'/transaction_train_new.csv')

op_test = pd.read_csv(path+r'/operation_round1_new.csv')
trans_test = pd.read_csv(path+r'/transaction_round1_new.csv')
y = pd.read_csv(path+r'/tag_train_new.csv')

la=[]

for x in op_test.columns:
    if x in trans_test.columns:
        la.append(x)
train=pd.merge(op_train,trans_train,on=la,how='outer')   
train=pd.merge(train,y,on='UID',how='outer')
op_d=pd.merge(op_test,trans_test,on=la,how='outer') 
print(train.shape,op_train.shape,trans_train.shape)
print(op_d.shape,op_test.shape,trans_test.shape)
op_d['Tag']=-1
train = train.fillna(-1)
test =op_d.fillna(-1)

data=pd.concat([train,test])
data=tim(data)

a=data.columns
b=['UID','Tag','trans_amt','bal','day','h','m','s']
encoder = LabelEncoder()
for x in a:
    if x not in b:
        
        try:
            data[x] = encoder.fit_transform(data[x].astype(str))
        except:
            data[x] = encoder.fit_transform(data[x].astype(str).fillna('nan'))
            
#        train[col] = le.fit_transform(train[col])
#    except:
#        train[col] = le.fit_transform(train[col].fillna('nan'))
        

train=data[data['Tag']!=-1]
test=data[data['Tag']==-1]
train.to_csv(path+'/train1.csv',index=False)
test.to_csv(path+'/test1.csv',index=False)
label = train['Tag']
train = train.drop(['UID','Tag'],axis = 1).fillna(-1)


test_id = test['UID']
sub = pd.DataFrame()


sub['UID']=test_id
sub['Tag']=-1
test = test.drop(['UID','Tag'],axis = 1).fillna(-1)


lgb_model = lgb.LGBMClassifier(boosting_type='gbdt', num_leaves=100, reg_alpha=3, reg_lambda=5, max_depth=-1,
    n_estimators=5000, objective='binary',metric='TC_AUC' ,subsample=0.9, colsample_bytree=0.77, subsample_freq=1, learning_rate=0.05,
    random_state=1000, n_jobs=16, min_child_weight=4, min_child_samples=5, min_split_gain=0)
skf = StratifiedKFold(n_splits=5, random_state=2018, shuffle=True)
best_score = []

oof_preds = np.zeros(train.shape[0])
sub_preds = np.zeros(test_id.shape[0])

for index, (train_index, test_index) in enumerate(skf.split(train, label)):
    lgb_model.fit(train.iloc[train_index], label.iloc[train_index], verbose=50,
                  eval_set=[(train.iloc[train_index], label.iloc[train_index]),
                            (train.iloc[test_index], label.iloc[test_index])],
                            eval_metric=tpr_weight_funtion, early_stopping_rounds=20)
    best_score.append(lgb_model.best_score_['valid_1']['TC_AUC'])
    print(best_score)
    oof_preds[test_index] = lgb_model.predict_proba(train.iloc[test_index], num_iteration=lgb_model.best_iteration_)[:,1]

    test_pred = lgb_model.predict_proba(test, num_iteration=lgb_model.best_iteration_)[:, 1]
    
    sub_preds += test_pred 
    m = tpr_weight_funtion(y_predict=oof_preds,y_true=label)
    print(m[1])
#sub = pd.read_csv('input/sub.csv')
#    sub['Tag'] = sub_preds 
#    sub.to_csv(path+'/baseline_%s.csv'%str(m),index=False)
    #print('test mean:', test_pred.mean())
    #predict_result['predicted_score'] = predict_result['predicted_score'] + test_pred

m = tpr_weight_funtion(y_predict=oof_preds,y_true=label)
print(m[1])
#sub = pd.read_csv('input/sub.csv')
sub['Tag'] = sub_preds/5 
sub.to_csv(path+'/baseline_%s.csv'%str(m),index=False)
